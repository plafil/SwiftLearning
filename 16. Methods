//–°–¥–µ–ª–∞–µ–º —Å –≤–∞–º–∏ –Ω–µ–±–æ–ª—å—à—É—é –∏–≥—Ä—É
//1. –°–æ–∑–¥–∞–π—Ç–µ —Ç–∏–ø –ö–æ–º–Ω–∞—Ç–∞. –£ –∫–æ–º–Ω–∞—Ç—ã –µ—Å—Ç—å —Ä–∞–∑–º–µ—Ä—ã W –Ω–∞ H. –ò —Å–æ–∑–¥–∞–π—Ç–µ —Ç–∏–ø –ü–µ—Ä—Å–æ–Ω–∞–∂. –£ –Ω–µ–≥–æ –µ—Å—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ –≤ –∫–æ–º–Ω–∞—Ç–µ X –∏ Y. –†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –∫—Ä–∞—Å–∏–≤–æ —Ç–µ–∫—Å—Ç–æ–º –±—É–¥–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ –∫–æ–º–Ω–∞—Ç–µ
//2. –ü–µ—Ä—Å–æ–Ω–∞–∂—É –¥–æ–±–∞–≤—å—Ç–µ –º–µ—Ç–æ–¥ –∏–¥—Ç–∏, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —ç–Ω—É–º –ª–µ–≤–æ, –ø—Ä–∞–≤–æ, –≤–ø–µ—Ä–µ–¥, –Ω–∞–∑–∞–¥. –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –¥–æ–ª–∂–µ–Ω –ø–µ—Ä–µ–¥–≤–∏–≥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞. –†–µ–∞–ª–∏–∑—É–π—Ç–µ –ø—Ä–∞–≤–∏–ª–æ —á—Ç–æ –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø–æ–∫–∏–Ω—É—Ç—å –ø—Ä–µ–¥–µ–ª—ã –∫–æ–º–Ω–∞—Ç—ã. –ü–æ–¥–≤–∏–≥–∞–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏ –ø–æ–∫–∞–∂–∏—Ç–µ —ç—Ç–æ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏
//3. –°–æ–∑–¥–∞—Ç—å —Ç–∏–ø –Ø—â–∏–∫. –£ —è—â–∏–∫–∞ —Ç–∞–∫–∂–µ –µ—Å—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ –≤ –∫–æ–º–Ω–∞—Ç–µ X –∏ Y. –Ø—â–∏–∫ —Ç–∞–∫–∂–µ –Ω–µ –º–æ–∂–µ—Ç –ø–æ–∫–∏–¥–∞—Ç—å –ø—Ä–µ–¥–µ–ª—ã –∫–æ–º–Ω–∞—Ç—ã –∏ —è—â–∏–∫ —Ç–∞–∫–∂–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–∞—Å–ø–µ—á–∞—Ç–∞–Ω –≤–º–µ—Å—Ç–µ —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º –≤ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–µ—á–∞—Ç–∏.
//4. –¢–µ–ø–µ—Ä—å —Å–∞–º–æ–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ, –ø–µ—Ä—Å–æ–Ω–∞–∂ –º–æ–∂–µ—Ç –¥–≤–∏–≥–∞—Ç—å —è—â–∏–∫, –µ—Å–ª–∏ –æ–Ω —Å—Ç–æ–∏—Ç –Ω–∞ —Ç–æ–º –º–µ—Å—Ç–µ, –∫—É–¥–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂ —Ö–æ—á–µ—Ç –ø–æ–ø–∞—Å—Ç—å. –ì–ª–∞–≤–Ω–æ–µ —á—Ç–æ –Ω–∏ –æ–¥–∏–Ω –æ–±—ä–µ–∫—Ç –Ω–µ –º–æ–∂–µ—Ç –ø–æ–∫–∏–Ω—É—Ç—å –ø—Ä–µ–¥–µ–ª—ã –∫–æ–º–Ω–∞—Ç—ã. –ü–æ–¥–≤–∏–≥–∞–π—Ç–µ —è—â–∏–∫.
//5. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ—á–∫—É –≤ –∫–æ–º–Ω–∞—Ç–µ, –∫—É–¥–∞ –Ω–∞–¥–æ —è—â–∏–∫ –ø–µ—Ä–µ–¥–≤–∏–Ω—É—Ç—å –∏ –¥–≤–∏–≥–∞–π—Ç–µ.
//6. –î–æ–±–∞–≤–∏—Ç—å –º–∞—Å—Å–∏–≤ —è—â–∏–∫–æ–≤

struct Room {
    let dimensions: (w: Int, h: Int)
    var person: Person {
        didSet {
            switch person.coordinates {
            case (x: 1...self.dimensions.w, y: 1...self.dimensions.h):
                break
            default:
                person = oldValue
            }
        }
    }
    var boxArray: [Box] {
        didSet {
            for i in boxArray {
                switch i.coordinates {
                case (x: 1...self.dimensions.w, y: 1...self.dimensions.h):
                    break
                default:
                    boxArray = oldValue
                }
            }
            
        }
    }
    var target: Target
    
    func showElements() {
        var isCompleted = true
        let border = ([String](repeating: "‚¨õ", count: self.dimensions.w + 2)).joined(separator: " ")
        let arrSq = [String](repeating: "‚¨ú", count: self.dimensions.w)
        print("\nCurrent position of the person and box(es) in the room:")
        print(border)
            for i in (1...self.dimensions.h).reversed() {
                var arr = arrSq
                for box in self.boxArray {
                    if i == self.person.coordinates.y {
                        arr[self.person.coordinates.x - 1] = Person.sign
                    }
                    if i == self.target.coordinates.y && self.target.coordinates != self.person.coordinates {
                        arr[self.target.coordinates.x - 1] = Target.sign
                    }
                    if i == box.coordinates.y && box.coordinates != self.person.coordinates && box.coordinates != self.target.coordinates {
                        arr[box.coordinates.x - 1] = Box.sign
                    }
                    if self.target.coordinates != box.coordinates {
                        isCompleted = false
                    }
                }
                print("‚¨õ \(arr.joined(separator: " ")) ‚¨õ")
        }
        print(border)
        if isCompleted == true {
            print("You win! üëçüëçüëç")
        }
    }
    
}

struct Person {
    static let sign = "üë®"
    var coordinates = (x: 1, y: 1)
    
    mutating func move(direction: Direction, room: inout Room) {
        var change = (x: 0, y: 0)
        switch direction {
        case .Left:
            change = (-1, 0)
        case .Right:
            change = (1, 0)
        case .Forward:
            change = (0, 1)
        case .Back:
            change = (0, -1)
        }
        room.person.coordinates.x += change.x
        room.person.coordinates.y += change.y
        
        for i in 0..<room.boxArray.count {
            if room.person.coordinates == room.boxArray[i].coordinates {
                room.boxArray[i].coordinates.x += change.x
                room.boxArray[i].coordinates.y += change.y
            }
        }
        room.showElements()
    }
}
    
struct Box {
    static let sign = "üì¶"
    var coordinates: (x: Int, y: Int)
}

struct Target {
    static let sign = "‚ùé"
    var coordinates: (x: Int, y: Int)
}

enum Direction {
    case Left
    case Right
    case Forward
    case Back
}


var pers = Person()
var boxes = [Box(coordinates: (3, 2)), Box(coordinates: (7,3))]
var room = Room(dimensions: (10, 5), person: pers, boxArray: boxes, target: Target(coordinates: (8, 4)))
room.showElements()

//–ø–µ—Ä–µ–¥–≤–∏–∂–µ–Ω–∏–µ —è—â–∏–∫–æ–≤ –Ω–∞ —Ü–µ–ª–µ–≤—É—é —Ç–æ—á–∫—É:
//pers.move(direction: .Right, room: &room)
//pers.move(direction: .Right, room: &room)
//pers.move(direction: .Forward, room: &room)
//pers.move(direction: .Forward, room: &room)
//pers.move(direction: .Left, room: &room)
//pers.move(direction: .Forward, room: &room)
//pers.move(direction: .Right, room: &room)
//pers.move(direction: .Right, room: &room)
//pers.move(direction: .Right, room: &room)
//pers.move(direction: .Right, room: &room)
//pers.move(direction: .Right, room: &room)
//pers.move(direction: .Left, room: &room)
//pers.move(direction: .Back, room: &room)
//pers.move(direction: .Back, room: &room)
//pers.move(direction: .Right, room: &room)
//pers.move(direction: .Forward, room: &room)
//pers.move(direction: .Left, room: &room)
//pers.move(direction: .Forward, room: &room)
//pers.move(direction: .Right, room: &room)
