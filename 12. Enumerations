//1. Создать энум с шахматными фигруами (король, ферзь и т.д.). Каждая фигура должна иметь цвет белый либо черный (надеюсь намек понят), а так же букву и цифру для позиции. Создайте пару фигур с расположением на доске, так, чтобы черному королю был мат :) Поместите эти фигуры в массив фигур
enum ColorChess: String {
    case White = "White"
    case Black = "Black"
}

enum Chess {
    case King(color: ColorChess, position: (String, Int))
    case Queen(color: ColorChess, position: (String, Int))
    case Rock(color: ColorChess, position: (String, Int))
    case Bishop(color: ColorChess, position: (String, Int))
    case Knight(color: ColorChess, position: (String, Int))
    case Pawn(color: ColorChess, position: (String, Int))
}

var whiteKing = Chess.King(color: .White, position: ("D", 1))
var whiteQueen = Chess.Queen(color: .White, position: ("H", 7))
var whiteRock = Chess.Rock(color: .White, position: ("A", 8))
var whiteBishop = Chess.Bishop(color: .White, position: ("C", 1))
var blackKing = Chess.King(color: .Black, position: ("D", 8))
var blackPawn = Chess.Pawn(color: .Black, position: ("F", 4))
var blackKnight = Chess.Knight(color: .Black, position: ("H", 6))

let figures = [whiteKing, whiteQueen, whiteRock, whiteBishop, blackKing, blackPawn, blackKnight]


//2. Сделайте так, чтобы энумовские значения имели rawValue типа String. Каждому типу фигуры установите соответствующее английское название. Создайте функцию, которая выводит в консоль (текстово, без юникода) название фигуры, цвет и расположение. Используя эту функцию распечатайте все фигуры в массиве.
enum figureNames: String {
    case King = "King"
    case Queen = "Queen"
    case Rock = "Rock"
    case Bishop = "Bishop"
    case Knight = "Knight"
    case Pawn = "Pawn"
}

func figureDescription(figure: Chess) -> String {
    switch figure {
    case .King(color: let col, position: let pos):
        return "\(col) \(figureNames.King.rawValue), position: \(pos.0)\(pos.1)"
    case .Queen(color: let col, position: let pos):
        return "\(col) \(figureNames.Queen.rawValue), position: \(pos.0)\(pos.1)"
    case .Rock(color: let col, position: let pos):
        return "\(col) \(figureNames.Rock.rawValue), position: \(pos.0)\(pos.1)"
    case .Bishop(color: let col, position: let pos):
        return "\(col) \(figureNames.Bishop.rawValue), position: \(pos.0)\(pos.1)"
    case .Knight(color: let col, position: let pos):
        return "\(col) \(figureNames.Knight.rawValue), position: \(pos.0)\(pos.1)"
    case .Pawn(color: let col, position: let pos):
        return "\(col) \(figureNames.Pawn.rawValue), position: \(pos.0)\(pos.1)"
    default:
        break
    }
}

for i in 0..<figures.count {
    print(figureDescription(figure: figures[i]))
}


//3. Используя красивые юникод представления шахматных фигур, выведите в консоли вашу доску. Если клетка не содержит фигуры, то используйте белую или черную клетку. Это должна быть отдельная функция, которая распечатывает доску с фигурами (принимает массив фигур и ничего не возвращает)

func chessTable(_ figure: [Chess]) {
    print("\n ", "A", "B", "C", "D", "E", "F", "G", "H")
    var str = [" " : " "]
    for i in (1...8).reversed() {
        if i % 2 == 0 {
            str = ["A": "□", "B": "■", "C": "□", "D": "■", "E": "□", "F": "■", "G": "□", "H": "■"]
        } else {
            str = ["A" : "■", "B" : "□", "C" : "■", "D" : "□", "E" : "■", "F" : "□", "G" : "■", "H" : "□"]
        }

        for fig in figure {
            switch fig {
            case .King(color: .White, position: (let l, i)):
                str[l] = "♔"
            case .King(color: .Black, position: (let l, i)):
                str[l] = "♚"
            case .Queen(color: .White, position: (let l, i)):
                str[l] = "♕"
            case .Queen(color: .Black, position: (let l, i)):
                str[l] = "♛"
            case .Rock(color: .White, position: (let l, i)):
                str[l] = "♖"
            case .Rock(color: .Black, position: (let l, i)):
                str[l] = "♜"
            case .Bishop(color: .White, position: (let l, i)):
                str[l] = "♗"
            case .Bishop(color: .Black, position: (let l, i)):
                str[l] = "♝"
            case .Knight(color: .White, position: (let l, i)):
                str[l] = "♘"
            case .Knight(color: .Black, position: (let l, i)):
                str[l] = "♞"
            case .Pawn(color: .White, position: (let l, i)):
                str[l] = "♙"
            case .Pawn(color: .Black, position: (let l, i)):
                str[l] = "♟"
            default:
                break
            }
        }
        
        print(i, str["A"]!, str["B"]!, str["C"]!, str["D"]!, str["E"]!, str["F"]!, str["G"]!, str["H"]!)
        }
    }

chessTable(figures)

//4. Создайте функцию, которая будет принимать шахматную фигуру и тюпл новой позиции. Эта функция должна передвигать фигуру на новую позицию, причем перемещение должно быть легальным: нельзя передвинуть фигуру за пределы поля. Вызовите эту функцию для нескольких фигур и распечатайте поле снова.
func change(_ figure: inout Chess, newPosition: (String, Int)) {
    switch newPosition {
    case ("A"..."H", 1...8):
        switch figure {
        case .King(let col, _):
            figure = .King(color: col, position: newPosition)
        case .Queen(let col, _):
            figure = .Queen(color: col, position: newPosition)
        case .Rock(let col, _):
            figure = .Rock(color: col, position: newPosition)
        case .Bishop(let col, _):
            figure = .Bishop(color: col, position: newPosition)
        case .Knight(let col, _):
            figure = .Knight(color: col, position: newPosition)
        case .Pawn(let col, _):
            figure = .Pawn(color: col, position: newPosition)
        default:
            break
        }
    default:
        print("You've entered incorrect chess line (\(newPosition.1)) or column (\(newPosition.0)) number, please try again!")
    }
}

change(&whiteKing, newPosition: ("E", 1))
change(&whiteQueen, newPosition: ("B", 1))
change(&blackPawn, newPosition: ("F", 3))

let figuresNew = [whiteKing, whiteQueen, whiteRock, whiteBishop, blackKing, blackPawn, blackKnight]
chessTable(figuresNew)
