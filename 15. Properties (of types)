//1. Создать структуру “Описание файла” содержащую свойства:
//- путь к файлу
//- имя файла
//- максимальный размер файла на диске
//- путь к папке, содержащей этот файл
//- тип файла (скрытый или нет)
//- содержимое файла (можно просто симулировать контент)
//Главная задача - это использовать правильные свойства там, где нужно, чтобы не пришлось хранить одни и те же данные в разных местах и т.д. и т.п.

struct FileDescription {
    var path: String {
        return pathToFolder + "/" + name
    }
    var name: String
    var pathToFolder: String
    var content: String
    
    lazy var isHidden: Bool = false
    static let maxSize: Int = 2048
}

var notepad = FileDescription(name: "Notes", pathToFolder: "C:/FolderOne", content: "I make notes here")


//2. Создайте энум, который будет представлять некую цветовую гамму. Этот энум должен быть типа Int и как raw значение должен иметь соответствующее 3 байтное представление цвета. Добавьте в этот энум 3 свойства типа: количество цветов в гамме, начальный цвет и конечный цвет.
enum Colors: Int {
    case Red = 0xFF0000
    case Green = 0x009900
    case White = 0xFFFFFF
    
    static let countOfColors = 3
    static let firstColor = Colors.Red
    static let lastColor = Colors.White
}

print("My pallette: \(Colors.Red) (3-bite #\(Colors.Red.rawValue)), \(Colors.Green) (3-bite #\(Colors.Green.rawValue)), \(Colors.White) (3-bite #\(Colors.White.rawValue)).")

//3. Создайте класс человек, который будет содержать имя, фамилию, возраст, рост и вес. Добавьте несколько свойств непосредственно этому классу чтобы контролировать:
//- минимальный и максимальный возраст каждого объекта
//- минимальную и максимальную длину имени и фамилии
//- минимально возможный рост и вес
//- самое интересное, создайте свойство, которое будет содержать количество созданных объектов этого класса
class Human {
    var name: String {
        didSet {
            if name.count < Human.minLength || name.count > Human.maxLength {
                name = oldValue
            }
        }
    }
    var surname: String {
        didSet {
                if surname.count < Human.minLength || surname.count > Human.maxLength {
                    surname = oldValue
                }
            }
        }
    var age: Int {
        didSet {
            if age < Human.minAge || age > Human.maxAge {
                age = oldValue
            }
        }
    }
    var height: Int {
        didSet {
            if height < Human.minHeight {
                height = oldValue
            }
        }
    }
    var weight: Int {
        didSet {
            if weight < Human.minWeight {
                weight = oldValue
            }
        }
    }
    
    static var totalHumans = 0
    static let minAge = 16
    static let maxAge = 135
    static let minLength = 1
    static let maxLength = 20
    static let minHeight = 30
    static let minWeight = 25
    
    init(name: String, surname: String, age: Int, height: Int, weight: Int) {
        self.name = name
        self.surname = surname
        self.age = age
        self.height = height
        self.weight = weight
        Human.totalHumans += 1
    }
}

let firstHuman = Human(name: "Ivan", surname: "Petrov", age: 25, height: 180, weight: 70)
let secondHuman = Human(name: "Ben", surname: "Foster", age: 35, height: 195, weight: 80)
print("There are \(Human.totalHumans) objects of class <Human> created.")
